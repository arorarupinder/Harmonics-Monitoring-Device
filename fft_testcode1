#inputted module
from scipy import signal #object
from numpy.fft import fft, ifft
import matplotlib.pyplot as plot #plot is the object 
import numpy as np #np is inputted as object

# Sampling rate 1024 hz / second
t = np.linspace(0, 10, 1024, endpoint=True) #np is the object and linspace is the function
print(t)
#Normalizing t
z= np.zeros(len(t))
print(z)

# Plot the square wave signal
y=signal.square(2 * np.pi * 0.1 * t) #t is the input time array, duty cycle= 50%
plot.plot(t, y)

print(y)

# Give a title for the square wave plot
plot.title('Sqaure wave - 5 Hz sampled at 1024 Hz /second')

# Give x axis label for the square wave plot
plot.xlabel('Time')

# Give y axis label for the square wave plot
plot.ylabel('Amplitude')
plot.grid(True, which='both')

# Provide x axis and line color
plot.axhline(y=0, color='k')

# Set the max and min values for y axis
plot.ylim(-2, 2)

# Display the square wave drawn
plot.show()

#generating the FFT plot
X = fft(y) #calculating fft of y, outputs a vector of complex numbers
N = len(y) #determines the length of y
n = np.arange(N) #arranges the length of y into an array
T = N/1024 #length of y/ sample rate
freq = n/T #array length of y/ (length of y/ sample rate) = frequency

plt.figure(figsize = (12, 6)) #size of fft graph
plt.subplot(121)


plt.stem(freq, np.abs(X), 'b', markerfmt=" ", basefmt="-b") #stem plot plots vertical lines at each x location from the 
                                                            #baseline to y, and places a marker there
plt.xlabel('Freq (Hz)')
plt.ylabel('FFT Amplitude |X(freq)|')
plt.xlim(0, 10)

plt.show()
