# uart central & rotary_display integrated
from easy_comms import Easy_comms
from time import sleep
from machine import Pin
from machine import Pin, I2C
from os import listdir
from ssd1306 import SSD1306_I2C
from time import sleep
import json

com1 = Easy_comms(0,9600)
led = Pin(25, Pin.OUT)

while True:
    message = com1.read()
    if message is not None:
        #data = json.loads(message)
        data = message
        led.toggle()
        print(data)
    
# I2C variables
i2c = I2C(id=0, scl=Pin(21), sda=Pin(20))

# Screen Variables
width = 128
height = 64
line = 1 
highlight = 1
shift = 0
list_length = 0
total_lines = 6

# create the display
#oled = SSD1306_I2C(width=width, height=height, i2c=i2c)

oled = SSD1306_I2C(width=128, height=64, i2c=i2c)
oled.init_display()

# Setup the Rotary Encoder
button_pin = Pin(16, Pin.IN, Pin.PULL_UP)
direction_pin = Pin(17, Pin.IN, Pin.PULL_UP)
step_pin  = Pin(18, Pin.IN, Pin.PULL_UP)

# for tracking the direction and button state
previous_value = True
button_down = False

'''
def get_files():
    """ Get a list of Python files in the root folder of the Pico """
    
    files = listdir() #getting files in the directory
    menu = [] #creating an empty array
    for file in files: #each element in array files
        if file.endswith(".py"): #checking if file ends w py
            menu.append(file) #if yes add file to menu array

    return(menu) #return menu containing values
'''
'''
def options_list():
    options=[]
    
    for val in range(1, 20):
        options.append(val)
        
    print ("checking", options) #printing for checking
    return(options)
'''


def show_menu(menu):
    """ Shows the menu on the screen"""
    
    
    
    # bring in the global variables
    global line, highlight, shift, list_length #no longer local variables but global

    # menu variables
    item = 1
    line = 1
    line_height = 10

    # clear the display
    oled.fill_rect(0,0,width,height,0) #highligting the display

    # Shift the list of files so that it shows on the display
    list_length = len(menu)
    short_list = menu[shift:shift+total_lines]

    for item in short_list:
        if highlight == line:
            oled.fill_rect(0,(line-1)*line_height, width,line_height,1)
            oled.text(">",0, (line-1)*line_height,0)
            oled.text(item, 10, (line-1)*line_height,0)
            oled.show()
        else:
            oled.text(item, 10, (line-1)*line_height,1)
            oled.show()
        line += 1 
    oled.show()

'''
def launch(filename):
    """ Launch the Python script <filename> """
    global file_list
    # clear the screen
    oled.fill_rect(0,0,width,height,0)
    oled.text("Launching", 1, 10)
    oled.text(filename,1, 20)
    oled.show()
    sleep(3)
    exec(open(filename).read())
    show_menu(file_list)
'''

# Get the list of Python files and display the menu

#file_list = get_files() #list of files stored in this variable
#show_menu(file_list) #showing list of files on screen

#options = options_list() #list generated in the function
#options_str= str(options) #converting integer to string
#show_menu(options_str) #showing list generated on display

options = ['Option 1', 'Option 2', 'Option 3', 'Option 4']
show_menu(options) #showing list generated on display




#previous_value = True
#button_down = False


# Repeat forever
while True:
    if previous_value != step_pin.value():
        if step_pin.value() == False:

            # Turned Left 
            if direction_pin.value() == False:
                if highlight > 1:
                    highlight -= 1  
                else:
                    if shift > 0:
                        shift -= 1  

            # Turned Right
            else:
                if highlight < total_lines:
                    highlight += 1
                else: 
                    if shift+total_lines < list_length:
                        shift += 1

        #show_menu(file_list)
        show_menu(options)
        previous_value = step_pin.value()   
        
    # Check for button pressed
    if button_pin.value() == False and not button_down:
        button_down = True
        
        print("Threshold set")
       

        #print("Launching", file_list[highlight-1+shift]) 

        # execute script
        #launch(file_list[(highlight-1) + shift])
        
        #print("Returned from launch")
        
        #DEFINE ANOTHER FUNCTION GIVE IT A VALUE
        #EXEXUTE ONE OTHER TEST FILE AND PRINT CHOSEN VAL

    # Decbounce button
    if button_pin.value() == True and button_down:
        button_down = False
